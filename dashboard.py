import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

import joblib

from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

from scipy.stats import shapiro, ttest_ind, mannwhitneyu





# Configura√ß√£o inicial da p√°gina
st.set_page_config(
    page_title="Meu Dashboard Anal√≠tico",
    page_icon="üìä",
    layout="wide"
)

st.markdown(
    """
    <style>
        .stApp {
            background-color: #e6f2ff;  /* Cor de fundo cinza claro */
        }
    </style>
    """, 
    unsafe_allow_html=True
)

# Carregar os dados
@st.cache_data
def load_data():
    data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
    data = data.dropna(subset=['MMSE', 'CDR'])
    data.drop('Delay', axis=1, inplace=True)
    return data

data = load_data()

@st.cache_data
def load_data2():
    data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
    # Filtrar os dados onde MMSE e CDR n√£o s√£o nulos
    data = data.dropna(subset=['MMSE', 'CDR'])
    data.drop('Delay', axis=1, inplace=True)
    data["CDR"] = data["CDR"].astype(str)

    return data

data2 = load_data2()








# Criando as abas
tab_title, tab_intro_problema,  tab_estudo, tab_analises, tab_pred, tab_pca, tab_simulacao, tab_conclusoes = st.tabs(["-", "üìå Introdu√ß√£o ao Problema", "Estudo",  
                                                   "üìà An√°lises",
                                                  "Predi√ß√µes", "PCA e Agrupamento", "Simula√ß√µes",
                                                  "Conclus√µes"])

with tab_title:
    st.markdown(
        """
        <h1 style="text-align: center; font-size: 40px; color: #0073e6;">
            An√°lise de Alzheimer: Diagn√≥stico e Tend√™ncias
        </h1>
        """,
        unsafe_allow_html=True
    )
    col1, col2, col3 = st.columns([1, 1, 1])

    with col2:
        st.image("image_title.webp", use_container_width =False,  width=400)


with tab_intro_problema:
    
    col1, col2 = st.columns([1, 1])

    with col1:
        
        # st.subheader("Introdu√ß√£o ao Problema")
        with st.container(border=True):  
            sinais = [
            "üìâ **Perda de mem√≥ria** ‚Äì Esquecimento frequente de informa√ß√µes recentes.",
            "üëú **Perder pertences ou deixar objetos em lugares inusitados** ‚Äì Como colocar chaves na geladeira.",
            "üõ†Ô∏è **Dificuldade em realizar tarefas cotidianas** ‚Äì Como cozinhar, dirigir ou pagar contas.",
            "üß≠ **Desorienta√ß√£o no espa√ßo e no tempo** ‚Äì Perder-se em lugares conhecidos.",
            "üß© **Dificuldade no planejamento e resolu√ß√£o de problemas** ‚Äì Como seguir uma receita simples.",
            "‚öñÔ∏è **Tomada de decis√µes inadequadas** ‚Äì Como confiar em pessoas erradas ou gastar muito dinheiro.",
            "üó£Ô∏è **Dificuldade de expressar e compreender a l√≠ngua** ‚Äì Esquecer palavras ou repetir frases.",
            "üëÄ **Problemas de aten√ß√£o, concentra√ß√£o e percep√ß√£o** ‚Äì Dificuldade para manter o foco."
        ]

        for sinal in sinais:
            st.markdown(f"- {sinal}")

           
    with col2:  
        # Voc√™ pode adicionar imagens, gr√°ficos ou outros elementos
        
        st.image("brain.png", caption="Atrofia Cerebral", width=400)


with tab_estudo: 
    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader("Descri√ß√£o dos dados:")
        with st.container(border=True):
            st.write("""
                    - 416 pessoas participaram do estudo;
                    - Idades entre 18 e 96 anos;
                    - Para cada pessoa, s√£o inclu√≠das dados de resson√¢ncias magn√©ticas individuais, obtidas em sess√µes de varredura √∫nica;
                    - Todos destros;
                    - Inclui homens e mulheres;
                    - Um conjunto de dados de confiabilidade √© inclu√≠do contendo 20 sujeitos n√£o dementes fotografados em uma visita subsequente dentro de 90 dias de sua sess√£o inicial.
            """)
        st.subheader("Tratamento dos dados:")
        with st.container(border=True):
            st.write("""
                    - Os dados foram filtrados para incluir apenas aqueles com pontua√ß√£o MMSE e CDR n√£o nulas;
                    - As colunas de dados irrelevantes foram removidas;
                    - Dos 416 dados originais, 235 foram mantidos ap√≥s o pr√©-processamento.
                    - Os dados que foram removidos pertencem a pessoas com idades abaixo de 59 anos
            """)
    
    with col2:
        st.subheader("üìä Vari√°veis do Conjunto de Dados")
        
        # Container para as vari√°veis
        with st.container(border=True):
            variaveis = {
                "ID": "Identifica√ß√£o",
                "M/F": "M = Masculino, F = Feminino",
                "M√£o": "M√£o Dominante",
                "Idade": "Idade em anos",
                "Educ": "N√≠vel de Educa√ß√£o, de 1 a 5",
                "NSE": "N√≠vel Socioecon√¥mico, de 1 a 5",
                "eTIV": "Volume Intracraniano Total Estimado",
                "ASF": "Fator de Escala Atlas",
                "nWBV": "Volume Cerebral Total Normalizado",
                "MMSE": "Mini Exame do Estado Mental ‚Äì escala de 0 a 30",
                "CDR": "Escala Cl√≠nica de Dem√™ncia. 0 = Sem Dem√™ncia, 0.5 = Dem√™ncia Muito Leve, 1 = Dem√™ncia Leve, 2 = Dem√™ncia Moderada"
            }

            for var, desc in variaveis.items():
                st.markdown(f"**{var}**: {desc}")
        
        # Bot√£o para mostrar/ocultar a imagem
        if st.button('MMSE'):
            if 'show_image' not in st.session_state:
                st.session_state.show_image = False
            st.session_state.show_image = not st.session_state.show_image
        
        if st.session_state.get('show_image', False):
            st.image("mmse.jpg", use_container_width =True)

with tab_analises:
    
    # st.header("An√°lise de Correla√ß√£o")

    subtab1, subtab2, subtab3, subtab4 = st.tabs(["Distribui√ß√£o de CDR", "An√°lise de Correla√ß√£o", "nWBV vs CDR", "MMSE vs CDR"])
    
    

    with subtab1:

        col1, col2 = st.columns([2, 1])
        
        with col1:
            cdr_table = data.groupby(['CDR']).size().reset_index(name='Count')
            
            cdr_descricao = {
                0.0: 'Sem dem√™ncia',
                0.5: 'Dem√™ncia muito leve',
                1.0: 'Dem√™ncia leve',
                2.0: 'Dem√™ncia moderada'
            }

            # Substituir os valores da coluna CDR
            cdr_table['Interpreta√ß√£o'] = cdr_table['CDR'].map(cdr_descricao)
            cdr_table = cdr_table[['CDR','Interpreta√ß√£o','Count']]

            # Definir a paleta de cores personalizada
            cores_personalizadas = {
                0.0: '#4daf4a',  # Verde intermedi√°rio
                0.5: '#ff9999',  # Vermelho leve
                1.0: '#e41a1c',  # Vermelho intermedi√°rio
                2.0: '#990000'   # Vermelho intenso
            }

            # Mapear as cores para cada interpreta√ß√£o
            cdr_table['Cor'] = cdr_table['CDR'].map(cores_personalizadas)

            plt.figure(figsize=(4, 2))
            ax = sns.barplot(
                x='Count', 
                y='Interpreta√ß√£o', 
                data=cdr_table, 
                hue='Interpreta√ß√£o', 
                palette=cdr_table['Cor'].tolist(),  # Usar a lista de cores personalizadas
                dodge=False
            )

            # Adicionando os valores de contagem no final de cada barra
            for index, row in cdr_table.iterrows():
                ax.text(row['Count'] + 1, index, str(row['Count']), color='black', va='center')

            # Remover as bordas do gr√°fico
            for spine in ax.spines.values():
                spine.set_visible(False)

            # Adicionando t√≠tulos e r√≥tulos
            plt.title('Distribui√ß√£o de Casos por Tipo de Dem√™ncia')
            plt.xlabel('N√∫mero de Casos')
            plt.ylabel('Tipo de Dem√™ncia')

            # Remover a legenda de cores (opcional, j√° que os r√≥tulos est√£o no eixo Y)
            # ax.legend_.remove()

            # Exibindo o gr√°fico no Streamlit
            st.pyplot(plt, use_container_width=False)
        
        with col2:
            st.markdown("""
            - 100 dos sujeitos inclu√≠dos com mais de 60 anos foram clinicamente diagnosticados com doen√ßa de Alzheimer muito leve a moderada.
                        """)
        

    with subtab2:
    
        # Criar duas colunas (1:2 - a figura ocupar√° 1/3 do espa√ßo)
        col1, col2 = st.columns([2, 1])
        
        with col1:
            # Cria a figura menor
            fig, ax = plt.subplots(figsize=(5, 3))  # Tamanho reduzido
            corr_spearman = data.corr(method='spearman', numeric_only=True)
            mask = np.triu(np.ones_like(corr_spearman, dtype=bool))
            
            sns.heatmap(
                corr_spearman,
                mask=mask,
                annot=True,
                fmt=".2f",
                cmap='coolwarm',
                center=0,
                vmin=-1,
                vmax=1,
                cbar_kws={"shrink": 0.6},
                ax=ax,
                annot_kws={"size": 6} 
            )
            
            # Ajustar fonte da colorbar
            cbar = ax.collections[0].colorbar
            cbar.ax.tick_params(labelsize=6) 

            ax.set_title("Correla√ß√£o (Spearman)", fontsize=10)
            plt.xticks(rotation=45, fontsize=6)
            plt.yticks(rotation=0, fontsize=6)
            plt.tight_layout()
            
            st.pyplot(fig, use_container_width=False)
        
        with col2:
            st.markdown("""
            **Mapa de Correla√ß√£o de Spearman**
            
            Este gr√°fico mostra as rela√ß√µes entre as vari√°veis num√©ricas:
            
            - **Correla√ß√£o Positiva (+1)**
            - **Correla√ß√£o Negativa (-1)**
            - **Sem Correla√ß√£o (0)**
            """)

    with subtab3:

        st.title("An√°lise Estat√≠stica de nWBV entre Pacientes com e sem Dem√™ncia")

        fig2 = px.scatter(
            data2,
            x='Age',
            y='nWBV',
            color='CDR',
            size='eTIV',
            hover_name='ID',
            title='Volume Cerebral Normalizado por Idade e CDR',
            labels={'Age': 'Idade', 'nWBV': 'Volume Cerebral Normalizado', 'CDR': 'CDR'},
            color_discrete_sequence=['#4daf4a', '#ff9999', '#e41a1c', '#990000']  
        )
        st.plotly_chart(fig2, use_container_width=True)

        nwbv_doentes_maiores_60 = data.loc[(data['Age'] > 60) & (data['CDR'] >0), ['nWBV']].reset_index(drop=True)
        nwbv_nao_doentes_maiores_60 = data.loc[(data['Age'] > 60) & (data['CDR']  == 0), ['nWBV']]

        def cohens_d(x, y):
            nx = len(x)
            ny = len(y)
            dof = nx + ny - 2
            pooled_std = np.sqrt(((nx-1)*np.std(x, ddof=1)**2 + (ny-1)*np.std(y, ddof=1)**2) / dof)
            return (np.mean(x) - np.mean(y)) / pooled_std
    
        st.header("Distribui√ß√£o do Volume Cerebral Total Normalizado")
    
        # Definir paleta de cores
        cor_nao_doentes = '#4daf4a'  # Verde
        cor_doentes = '#ff7f00'      # Laranja intenso

        # Criar 3 colunas (a terceira ter√° o dobro do tamanho)
        col1, col2, col3 = st.columns([1, 1, 1.5])

        # Gr√°ficos de distribui√ß√£o (colunas 1 e 2)
        with col1:
            #st.subheader(" ")
            fig, ax = plt.subplots(figsize=(4, 3))
            sns.histplot(nwbv_doentes_maiores_60['nWBV'], kde=True, color=cor_doentes, label='CDR > 0')
            plt.title("Distribui√ß√£o - Doentes (CDR > 0)")
            plt.xlabel("nWBV")
            plt.legend()
            st.pyplot(fig)

        with col2:
            #st.subheader(" ")
            fig, ax = plt.subplots(figsize=(4, 3))
            sns.histplot(nwbv_nao_doentes_maiores_60['nWBV'], kde=True, color=cor_nao_doentes, label='CDR = 0')
            plt.title("Distribui√ß√£o - N√£o Doentes (CDR = 0)")
            plt.xlabel("nWBV")
            plt.legend()
            st.pyplot(fig)

        # Boxplot (coluna 3 - mais larga)
        with col3:
            
            fig, ax = plt.subplots(figsize=(8, 4))
            
            # Preparar os dados
            nwbv_doentes_maiores_60['Grupo'] = 'CDR > 0'
            nwbv_nao_doentes_maiores_60['Grupo'] = 'CDR = 0'
            dados_comparacao = pd.concat([nwbv_doentes_maiores_60, nwbv_nao_doentes_maiores_60])
            
            # Criar o boxplot com a nova paleta
            sns.boxplot(x='Grupo', y='nWBV', data=dados_comparacao,
                        hue='Grupo', 
                        palette={'CDR > 0': cor_doentes, 'CDR = 0': cor_nao_doentes},
                        order=['CDR > 0', 'CDR = 0'],
                        legend=False)
            
            plt.title("Compara√ß√£o de nWBV: Doentes vs N√£o Doentes")
            plt.ylabel("nWBV")
            plt.xlabel("")
            st.pyplot(fig)


        # Se√ß√£o 2: Testes de Normalidade
        st.header("Testes de Normalidade (Shapiro-Wilk)")

        # Container com largura reduzida para o slider
        with st.container():
            col_slider, _ = st.columns([0.4, 0.6])  # Slider ocupar√° apenas 40% da largura
            
            with col_slider:
                alpha1 = st.slider("N√≠vel de signific√¢ncia (Œ±)", 
                                min_value=0.01, 
                                max_value=0.10, 
                                value=0.05, 
                                step=0.01,
                                help="N√≠vel de signific√¢ncia para os testes estat√≠sticos",
                                key="alpha_nwbv")

        # Realizar os testes
        stat_doentes, p_doentes = shapiro(nwbv_doentes_maiores_60['nWBV'])
        stat_nao_doentes, p_nao_doentes = shapiro(nwbv_nao_doentes_maiores_60['nWBV'])

        # Exibir resultados em colunas
        norm_col1, norm_col2 = st.columns(2)

        with norm_col1:
            # Card expandido para Doentes
            with st.expander("**Doentes (CDR > 0)**", expanded=True):
                st.markdown(f"""
                - **Estat√≠stica do teste:** {stat_doentes:.4f}
                - **Valor-p:** {p_doentes:.4f}
                - **Œ± selecionado:** {alpha1}
                """)
                st.markdown(f"#### Conclus√£o: {'Normal' if p_doentes > alpha1 else 'N√£o normal'}")

        with norm_col2:
            # Card expandido para N√£o Doentes
            with st.expander("**N√£o Doentes (CDR = 0)**", expanded=True):
                st.markdown(f"""
                - **Estat√≠stica do teste:** {stat_nao_doentes:.4f}
                - **Valor-p:** {p_nao_doentes:.4f}
                - **Œ± selecionado:** {alpha1}
                """)
                st.markdown(f"#### Conclus√£o: {'Normal' if p_nao_doentes > alpha1 else 'N√£o normal'}")
        
        # Se√ß√£o 3: Teste T e Tamanho do Efeito
        st.header("Compara√ß√£o entre Grupos")

        # C√°lculos estat√≠sticos
        t_stat, p_valor = ttest_ind(
            nwbv_doentes_maiores_60['nWBV'],
            nwbv_nao_doentes_maiores_60['nWBV'],
            alternative='less'
        )

        d = cohens_d(nwbv_doentes_maiores_60['nWBV'], nwbv_nao_doentes_maiores_60['nWBV'])

        # Layout em duas colunas
        col_t, col_d = st.columns(2)

        # Coluna 1 - Teste T
        with col_t:
            with st.container(border=True):  # Adiciona um quadro ao redor de col_t
                st.subheader("Teste T para Amostras Independentes")

                with st.expander("Hip√≥teses", expanded=True):
                    st.markdown("""
                    - **H‚ÇÄ (Nula):** Œº‚ÇÅ ‚â• Œº‚ÇÇ (Doentes t√™m nWBV maior/igual)
                    - **H‚ÇÅ (Alternativa):** Œº‚ÇÅ < Œº‚ÇÇ (Doentes t√™m nWBV menor)
                    """)

                col_esq, col_dir = st.columns(2)

                # Coluna da esquerda
                with col_esq:
                    st.markdown(f"""
                    **Resultados:**
                    - Estat√≠stica t = `{t_stat:.4f}`
                    - Graus de liberdade = `{len(nwbv_doentes_maiores_60) + len(nwbv_nao_doentes_maiores_60) - 2}`
                    """)

                # Coluna da direita
                with col_dir:
                    st.metric(label="Valor-p", 
                            value=f"{p_valor:.4f}",
                            delta="Significativo" if p_valor < alpha1 else "N√£o significativo",
                            delta_color="inverse")

                st.markdown(f"""
                ### Conclus√£o do Teste T
                {'‚úÖ **Rejeitamos H‚ÇÄ** (p < Œ±)' if p_valor < alpha1 else '‚ùå **N√£o rejeitamos H‚ÇÄ** (p ‚â• Œ±)'}
                Œ± = {alpha1}
                """)

        with col_d:
            with st.container(border=True):  # Adiciona um quadro ao redor de col_d
                # Criando duas colunas: esquerda para valores e interpreta√ß√£o, direita para tabela de refer√™ncia
                col_esq, col_dir = st.columns(2)

                # Coluna da esquerda
                with col_esq:
                    st.subheader("Tamanho do Efeito (Cohen's d)")

                    # Aumentando a fonte do valor calculado com HTML
                    st.markdown(f"""
                    <style>
                        .valor-calculado {{
                            font-size: 30px;
                            font-weight: bold;
                            color: #e41a1c;  /* Vermelho intermedi√°rio */
                        }}
                    </style>
                    **Valor calculado:**  
                    <p class="valor-calculado">d = {d:.2f}</p>
                    """, unsafe_allow_html=True)

                    # Determinar interpreta√ß√£o
                    abs_d = abs(d)
                    if abs_d >= 0.8:
                        interpretacao = "**Grande efeito** üü†"
                    elif abs_d >= 0.5:
                        interpretacao = "**M√©dio efeito** üü°"
                    else:
                        interpretacao = "**Pequeno efeito** üü¢"

                    st.markdown(f"""
                    ### Interpreta√ß√£o  
                    {interpretacao}  
                    **Dire√ß√£o:** {'Negativo' if d < 0 else 'Positivo'}
                    """)

                # Coluna da direita - Tabela de refer√™ncia
                with col_dir:
                    st.markdown("""
                    **Escala de refer√™ncia:**  
                    | d    | Interpreta√ß√£o |
                    |------|---------------|
                    | 0.2  | Pequeno       |
                    | 0.5  | M√©dio         |
                    | 0.8  | Grande        |
                    """)


    with subtab4:
        st.header("An√°lise Comparativa Exame Mental entre Pacientes com e sem Dem√™ncia")
        
        # =============================================
        # Se√ß√£o 1: Visualiza√ß√£o dos Dados
        # =============================================
        
        # Criar duas colunas para os gr√°ficos
        col_graph1, col_graph2 = st.columns(2)
        
        with col_graph1:
            # Gr√°fico de Strip
            custom_colors = ['#4daf4a', '#ff9999', '#e41a1c', '#990000']   
            fig_strip = px.strip(
                data2,
                y='MMSE',
                x='CDR',
                color='CDR',
                stripmode='overlay',
                title='Distribui√ß√£o Individual de Pontua√ß√µes do Exame Mental ',
                labels={'MMSE': 'Pontua√ß√£o Exame Mental ', 'CDR': 'Grau de Dem√™ncia'},
                color_discrete_sequence=custom_colors
            )
            fig_strip.update_traces(jitter=0.3)
            st.plotly_chart(fig_strip, use_container_width=True)
        
        with col_graph2:
            # Gr√°fico de Boxplot
            mmse_doentes = data.loc[(data['Age'] > 60) & (data['CDR'] > 0), ['MMSE']].copy()
            mmse_nao_doentes = data.loc[(data['Age'] > 60) & (data['CDR'] == 0), ['MMSE']].copy()
            
            mmse_doentes['Grupo'] = 'CDR > 0'
            mmse_nao_doentes['Grupo'] = 'CDR = 0'
            dados_comparacao = pd.concat([mmse_doentes, mmse_nao_doentes])
            
            fig_box = px.box(
                dados_comparacao,
                x='Grupo',
                y='MMSE',
                color='Grupo',
                color_discrete_map={'CDR > 0': '#ff7f00', 'CDR = 0': '#4daf4a'},
                title='Distribui√ß√£o de Pontua√ß√£o Exame Mental  Entre Doentes e N√£o Doentes',
                labels={'MMSE': 'Pontua√ß√£o Exame Mental ', 'Grupo': 'Divis√£o por Doentes e n√£o Doentes'},       
                )
            fig_box.update_layout(showlegend=False)
            st.plotly_chart(fig_box, use_container_width=True)
        
         
        st.subheader("An√°lise Estat√≠stica")
        
        # Configura√ß√£o do teste
        with st.container():
            col_slider, _ = st.columns([0.3, 0.7])
            with col_slider:
                alpha = st.slider("N√≠vel de signific√¢ncia (Œ±)", 
                                min_value=0.01, max_value=0.10, 
                                value=0.05, step=0.01,
                                help="Limiar para decis√£o estat√≠stica",
                                key="alpha_mmse")
        
        # Layout em colunas para os testes
        col_test1, col_test2 = st.columns(2)
        
        with col_test1:
            # Teste de Normalidade
            with st.expander("Teste de Normalidade (Shapiro-Wilk)", expanded=True):
                stat_d, p_d = shapiro(mmse_doentes['MMSE'])
                stat_nd, p_nd = shapiro(mmse_nao_doentes['MMSE'])
                
                st.markdown("""
                **Hip√≥teses:**
                - H‚ÇÄ: Os dados seguem uma distribui√ß√£o normal
                - H‚ÇÅ: Os dados n√£o seguem uma distribui√ß√£o normal
                """)
                
                st.markdown(f"""
                **Resultados:**
                - **CDR > 0 (Doentes):**
                - Estat√≠stica W = `{stat_d:.4f}`, p-valor = `{p_d:.4f}`
                
                - **CDR = 0 (N√£o Doentes):**
                - Estat√≠stica W = `{stat_nd:.4f}`,  p-valor = `{p_nd:.4f}`
                """)
                
                if p_d < 0.05 or p_nd < 0.05:
                    st.warning("""
                    **Conclus√£o:**  
                    Pelo menos um grupo n√£o segue distribui√ß√£o normal (p < 0.05).  
                    Recomendado usar teste n√£o-param√©trico.
                    """)
                else:
                    st.success("""
                    **Conclus√£o:**  
                    Ambos grupos seguem distribui√ß√£o normal (p ‚â• 0.05).  
                    Pode-se usar teste param√©trico.
                    """)
        
        with col_test2:
            # Teste de Mann-Whitney
            with st.expander("Teste de Mann-Whitney U", expanded=True):
                u_stat, p_valor = mannwhitneyu(
                    mmse_doentes['MMSE'],
                    mmse_nao_doentes['MMSE'],
                    alternative='less'
                )
                
                st.markdown("""
                **Hip√≥teses:**
                - H‚ÇÄ: N√£o h√° diferen√ßa entre os grupos
                - H‚ÇÅ: CDR > 0 tem MMSE menor (teste unilateral)
                """)
                
                st.markdown(f"""
                **Resultados:**
                - Estat√≠stica U = `{u_stat:.2f}`
                - p-valor = `{p_valor:.6f}`
                """)
                
                if p_valor < alpha:
                    st.error(f"""
                    **Conclus√£o Final:**  
                    Rejeitamos H‚ÇÄ (p < {alpha})  
                    H√° evid√™ncias de que pacientes com dem√™ncia t√™m MMSE significativamente menor.
                    """)
                else:
                    st.success(f"""
                    **Conclus√£o Final:**  
                    N√£o rejeitamos H‚ÇÄ (p ‚â• {alpha})  
                    N√£o h√° evid√™ncias suficientes para afirmar diferen√ßa significativa.
                    """)
        # =============================================
        # Se√ß√£o 4: Informa√ß√µes Adicionais
        # =============================================
        with st.expander("üìå Sobre a An√°lise", expanded=False):
            st.markdown("""
            **Metodologia:**
            - Popula√ß√£o: Pacientes acima de 60 anos
            - Vari√°vel resposta: Pontua√ß√£o Exame Mental (0-30)
            - Grupos comparados: CDR = 0 vs CDR > 0
            - Testes utilizados:
            -- Shapiro-Wilk (normalidade)
            -- Mann-Whitney U (diferen√ßa entre grupos)
            
            **Interpreta√ß√£o Cl√≠nica:**
            - MMSE < 24 sugere comprometimento cognitivo
            - CDR > 0 indica algum grau de dem√™ncia
            """)


with tab_pred:
    # Carregar o modelo salvo
    model = joblib.load('decision_tree_model.pkl')

    # T√≠tulo do app
    st.title("Classifica√ß√£o de Dem√™ncia (CDR)")

    st.markdown(
        """
        <style>
        .stFrame {
            border: 2px solid #f63366;
            border-radius: 5px;
            padding: 20px;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    with st.container():

            st.markdown('<div class="stFrame">', unsafe_allow_html=True)

            st.subheader("Preencha os dados do paciente:")

            # Layout em duas colunas
            col1, col2 = st.columns(2)

            with col1:
                gender = st.selectbox("Sexo (M/F)", ['M', 'F'])
                educ = st.selectbox("N√≠vel educacional", [1, 2, 3, 4, 5])
                age = st.number_input("Idade", min_value=0, max_value=120, value=75)
                etiv = st.number_input("Volume Total Intracraniano Estimado (1100 - 2000)", value=1500.0)

            with col2:
                ses = st.selectbox("Status socioecon√¥mico", [1, 2, 3, 4, 5])
                mmse = st.number_input("Mini-Exame do Estado Mental (0-30) ", min_value=0, max_value=30, value=28)
                nwbv = st.number_input("Volume Normalizado de Mat√©ria Branca (0,63 - 0,85)", value=0.75)

            # Montar DataFrame com os dados inseridos
            input_df = pd.DataFrame({
                'M/F': [gender],
                'Educ': [educ],
                'SES': [ses],
                'Age': [age],
                'MMSE': [mmse],
                'eTIV': [etiv],
                'nWBV': [nwbv]
            })

            # Bot√£o para acionar a previs√£o
            if st.button("Classificar"):
                prediction = model.predict(input_df)
                proba = model.predict_proba(input_df)
                st.success(f"Resultado previsto (CDR): {prediction[0]}")

            st.markdown('</div>', unsafe_allow_html=True)

with tab_pca:
    def preprocess_data(data):
        dados_pca = data[['M/F', 'Age', 'MMSE', 'ASF', 'nWBV', 'CDR']].copy()
        dados_pca['M/F'] = dados_pca['M/F'].map({'M': 0, 'F': 1})
        return dados_pca
    
    # Aplicar PCA
    def apply_pca(dados_pca):
        dados_normalizados = (dados_pca - dados_pca.mean()) / dados_pca.std()
        pca_3d = PCA(n_components=3)
        pca_resultado = pca_3d.fit_transform(dados_normalizados)
        return pd.DataFrame(data=pca_resultado, columns=['PC1', 'PC2', 'PC3'])

    # Aplicar KMeans
    def apply_kmeans(pca_df, n_clusters=4):
        kmeans = KMeans(n_clusters=n_clusters, random_state=42)
        labels = kmeans.fit_predict(pca_df)
        pca_df['Cluster'] = labels
        return pca_df

    # Fun√ß√£o para criar gr√°ficos
    def plot_3d_scatter(pca_df):
        fig = plt.figure(figsize=(6, 4))
        ax = fig.add_subplot(111, projection='3d')

        # Ordena os grupos para manter a consist√™ncia de cores
        grupos = sorted(pca_df['Cluster'].unique())

        cmap = plt.get_cmap("viridis")
        cores = {grupo: cmap(i / len(grupos)) for i, grupo in enumerate(grupos)}

        for grupo in grupos:
            subset = pca_df[pca_df['Cluster'] == grupo]
            ax.scatter(subset['PC1'], subset['PC2'], subset['PC3'], 
                    s=50, alpha=0.6, color=cores[grupo], label=f"Grupo {grupo}")

        ax.set_xlabel('PC1')
        ax.set_ylabel('PC2')
        ax.set_zlabel('PC3')
        ax.set_title('PCA - Visualiza√ß√£o 3D')
        ax.legend()
        return fig


    def plot_single_boxplot(dados_pca, coluna, cmap_name="viridis"):
        fig = plt.figure(figsize=(6, 4))

        grupos = sorted(dados_pca['Cluster'].unique())  # Garante mesma ordem de cor
        cmap = plt.get_cmap(cmap_name)
        cores = {grupo: cmap(i / len(grupos)) for i, grupo in enumerate(grupos)}

        sns.boxplot(x='Cluster', y=coluna, data=dados_pca,
                    palette=[cores[grupo] for grupo in grupos])

        plt.title(f'Distribui√ß√£o de {coluna} por Cluster')
        plt.tight_layout()
        return fig



    st.title("Dashboard PCA e KMeans")
    st.subheader("An√°lise de Componentes Principais (PCA) e KMeans")

    st.markdown("""
    **Metodologia:**
    
    Para esta an√°lise, utilizamos as seguintes vari√°veis do dataset: 
    - Sexo, convertido para valores num√©ricos: 0 para Masculino, 1 para Feminino
    - Idade
    - Mini Exame do Estado Mental (MMSE)
    - Fator de Escala Atlas (ASF)
    - Volume Cerebral Total Normalizado (nWBV)
    - Escala Cl√≠nica de Dem√™ncia
    
    Foi relizado um pr√©-processamento dos dados, onde as vari√°veis foram normalizadas e posteriormente aplicamos a t√©cnica de PCA 
    transformando-as em 3 componentes principais (PC1, PC2 e PC3) que capturam um 80%  da varia√ß√£o nos dados.
    
    Em seguida, aplicamos o algoritmo K-Means com 4 clusters para agrupar os casos com caracter√≠sticas similares 
    no espa√ßo reduzido pelo PCA.
    
    """)



    data_pca = load_data()
    dados_pca = preprocess_data(data_pca)
    pca_df = apply_pca(dados_pca)
    cluster_pca_df = apply_kmeans(pca_df)
    dados_pca['Cluster'] = cluster_pca_df['Cluster'].values
    
    colunas_boxplot = ['Age', 'MMSE', 'ASF', 'nWBV', 'CDR']


    # Criando duas colunas: a primeira ocupa 40% da largura e a segunda 60%
    col_esquerda, col_direita = st.columns([1, 2])

    # Coluna da esquerda - Apenas o gr√°fico 3D
    with col_esquerda:
        st.pyplot(plot_3d_scatter(cluster_pca_df))  # Gr√°fico isolado

    # Coluna da direita - Boxplots em duas linhas
    with col_direita:
        # Primeira linha - 3 boxplots
        col_topo1, col_topo2 = st.columns(2)
        with col_topo1:
            st.pyplot(plot_single_boxplot(dados_pca, colunas_boxplot[0]))
        with col_topo2:
            st.pyplot(plot_single_boxplot(dados_pca, colunas_boxplot[1]))
            

        # Segunda linha - 2 boxplots
        col_base1, col_base2 = st.columns(2)
        with col_base1:
            st.pyplot(plot_single_boxplot(dados_pca, colunas_boxplot[3]))
        with col_base2:
            st.pyplot(plot_single_boxplot(dados_pca, colunas_boxplot[2]))

        col_esq, col, col_dir = st.columns([1, 2, 1])
        with col:
            st.pyplot(plot_single_boxplot(dados_pca, colunas_boxplot[4]))


with tab_simulacao:

    # Fun√ß√£o para carregar e preprocessar os dados de simula√ß√£o
    @st.cache_data
    def load_data_simulacao():
        data = pd.read_csv('arquivos/oasis_cross-sectional.csv')
        data = data.dropna(subset=['MMSE', 'CDR']).drop('Delay', axis=1)
        return data

    # Fun√ß√£o para preparar as tabelas de distribui√ß√£o de CDR por faixa et√°ria
    def preprocess_cdr_tables(data_simulacao):
        data_simulacao_idades_cdr = data_simulacao[['Age', 'CDR']].dropna().reset_index(drop=True)

        # Filtrar apenas idades 65+
        data_65_plus = data_simulacao_idades_cdr[data_simulacao_idades_cdr['Age'] >= 65].copy()

        # Criar faixas et√°rias
        bins_65_plus = [65, 70, 75, 80, 85, 90, float('inf')]
        labels_65_plus = ['65-69', '70-74', '75-79', '80-84', '85-89', '90+']
        data_65_plus['faixa_etaria'] = pd.cut(data_65_plus['Age'], bins=bins_65_plus, labels=labels_65_plus, right=False)

        # Criar tabela agrupada por faixa et√°ria e CDR
        cdr_faixa_table = data_65_plus.groupby(['faixa_etaria', 'CDR'], observed=True).size().reset_index(name='Count')
        cdr_faixa_table = cdr_faixa_table.pivot(index='faixa_etaria', columns='CDR', values='Count').fillna(0)

        # Filtrar idades >= 60 e CDR > 0
        data_cdr_pos = data_simulacao_idades_cdr[(data_simulacao_idades_cdr['Age'] >= 60) & (data_simulacao_idades_cdr['CDR'] > 0)].copy()

        # Criar faixas et√°rias ajustadas
        bins_cdr_pos = [60, 70, 80, 90, float('inf')]
        labels_cdr_pos = ['60-69', '70-79', '80-89', '90+']
        data_cdr_pos['faixa_etaria'] = pd.cut(data_cdr_pos['Age'], bins=bins_cdr_pos, labels=labels_cdr_pos, right=False)

        # Criar tabela de porcentagem por faixa et√°ria e CDR
        cdr_faixa_count = data_cdr_pos.groupby(['faixa_etaria', 'CDR'], observed=True).size().reset_index(name='Count')
        total_por_faixa = cdr_faixa_count.groupby('faixa_etaria', observed=True)['Count'].transform('sum')
        cdr_faixa_count['Percent'] = (cdr_faixa_count['Count'] / total_por_faixa) * 100
        cdr_faixa_percent_table = cdr_faixa_count.pivot(index='faixa_etaria', columns='CDR', values='Percent').fillna(0)

        return cdr_faixa_table, cdr_faixa_percent_table

    # Fun√ß√£o para calcular a proje√ß√£o de Alzheimer
    def calcular_projecao_alzheimer():
        populacao_df = pd.read_csv("arquivos/populacao_idosos_2024_2040.csv")
        alzheimer_df = pd.read_csv("arquivos/alzheimer_por_faixa_etaria.csv")

        populacao_long = populacao_df.melt(id_vars="faixa_etaria", var_name="Ano", value_name="Populacao")
        populacao_long = populacao_long.merge(alzheimer_df, on="faixa_etaria")
        populacao_long["Alzheimer_Projecao"] = populacao_long["Populacao"] * (populacao_long["Alzheimer (%)"] / 100)
        populacao_long["Ano"] = populacao_long["Ano"].astype(int)

        return populacao_long

    # Fun√ß√£o para visualizar proje√ß√£o de Alzheimer


    def plot_alzheimer_projection(populacao_long):
        plt.figure(figsize=(12, 6))

        # Especificando a paleta de cores apenas para esse gr√°fico
        palette = sns.color_palette("dark")  # Troque "magma" por outra paleta se quiser

        # Criando o gr√°fico sem alterar as configura√ß√µes globais
        sns.lineplot(data=populacao_long, x="Ano", y="Alzheimer_Projecao", hue="faixa_etaria", 
                    marker="o", palette=palette)

        plt.title("Proje√ß√£o de Pessoas com Alzheimer por Faixa Et√°ria (2024‚Äì2040)")
        plt.xlabel("Ano")
        plt.ylabel("N√∫mero Estimado de Pessoas com Alzheimer")
        plt.legend(title="Faixa Et√°ria", bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.tight_layout()

        st.pyplot(plt)

    # Fun√ß√£o para calcular proje√ß√£o por CDR
    def calcular_projecao_cdr(populacao_long, cdr_faixa_percent_table):
        alz_idade_ano = populacao_long[['Ano', 'faixa_etaria', 'Alzheimer_Projecao']].copy()

        alz_idade_ano["faixa_etaria_ajustada"] = alz_idade_ano["faixa_etaria"].replace({
            "65-69": "60-69", "70-74": "70-79", "75-79": "70-79",
            "80-84": "80-89", "85-89": "80-89", "90+": "90+"
        })

        df_final = alz_idade_ano.merge(cdr_faixa_percent_table, left_on="faixa_etaria_ajustada", right_on="faixa_etaria", how="left")

        for cdr in [0.5, 1.0, 2.0]:
            df_final[f"CDR {cdr} Projecao"] = (df_final["Alzheimer_Projecao"] * (df_final[cdr] / 100)).round(0).astype(int)

        df_agrupado = df_final.groupby("Ano")[["CDR 0.5 Projecao", "CDR 1.0 Projecao", "CDR 2.0 Projecao"]].sum()
        
        return df_agrupado

    # Fun√ß√£o para visualizar proje√ß√£o por CDR
    def plot_cdr_projection(df_agrupado):
        # Definindo as cores personalizadas para cada categoria
        cores = {
            "CDR 0.5 Projecao": '#ff9999',  # Vermelho leve
            "CDR 1.0 Projecao": '#e41a1c',  # Vermelho intermedi√°rio
            "CDR 2.0 Projecao": '#990000'   # Vermelho intenso
        }

        # Criando a figura
        plt.figure(figsize=(10, 5))

        # Plotando cada linha com a cor correspondente
        for col in cores.keys():
            plt.plot(df_agrupado.index, df_agrupado[col], label=col, color=cores[col], linewidth=2)

        # Adicionando os r√≥tulos e t√≠tulo
        plt.xlabel("Ano")
        plt.ylabel("Quantidade de Casos")
        plt.title("Evolu√ß√£o do n√∫mero de casos de Alzheimer por gravidade")

        # Exibindo a legenda e grid
        plt.legend()
        plt.grid()

        # Renderizando o gr√°fico no Streamlit
        st.pyplot(plt)

    # Configura√ß√£o do Streamlit
    
    data_simulacao = load_data_simulacao()
    cdr_faixa_table, cdr_faixa_percent_table = preprocess_cdr_tables(data_simulacao)
    populacao_long = calcular_projecao_alzheimer()
    df_agrupado = calcular_projecao_cdr(populacao_long, cdr_faixa_percent_table)

    # tabelas e grafico principal
    st.subheader("Proje√ß√£o de Pessoas com Alzheimer no Brasil (2024-2040)")

    alzheimer_por_idade_brasil = pd.read_csv("arquivos/alzheimer_por_faixa_etaria.csv")

    # Cria duas colunas com propor√ß√£o 1:3
    col1, col2 = st.columns([1, 3])

    # Na primeira coluna (mais estreita), mostra a tabela
    with col1:
        st.subheader("Porcentagem de Pessoas com Alzheimer por Faixa Et√°ria")
        st.dataframe(
            alzheimer_por_idade_brasil,
            height=300,  # Altura fixa para melhor visualiza√ß√£o
            hide_index=True,  # Oculta o √≠ndice se n√£o for relevante
            use_container_width=True  # Usa toda a largura da coluna
        )

    # Na segunda coluna (mais larga), mostra o gr√°fico
    with col2:
        plot_alzheimer_projection(populacao_long)

    # Criar duas colunas abaixo do gr√°fico principal
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("Evolu√ß√£o do N√∫mero de Casos por Gravidade")
        plot_cdr_projection(df_agrupado)

    with col2:
        st.subheader("Tabela de Proje√ß√£o por Dem√™ncia Clinica") 
        st.write(df_agrupado)


with tab_conclusoes:
    st.subheader("Conclus√µes")

    with st.container(border=True): 
        st.markdown("""
        <style>
            .custom-text {
                font-size: 20px;
                font-weight: bold;
            }
        </style>
        <div class="custom-text">
        - Resultados baixos no Mini Exame de Estado Mental s√£o um sinal de alerta para poss√≠veis casos de dem√™ncia.<br>
        - Pode-se considerar realizar o MMSE a partir dos 60 anos.<br>
        - Exames de imagem s√£o recomendados para fornecer uma conclus√£o ap√≥s os resultados do Exame de Estado Mental.<br>
        - S√£o necessarios pol√≠ticas p√∫blicas para aumentar a conscientiza√ß√£o sobre a dem√™ncia e o Alzheimer, especialmente entre os idosos, para promover um diagn√≥stico precoce e interven√ß√µes adequadas.
        </div>
        """, unsafe_allow_html=True)